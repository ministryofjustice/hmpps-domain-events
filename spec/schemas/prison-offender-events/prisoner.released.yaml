name: prison-offender-events.prisoner.released
title: prison-offender-events.prisoner.released
summary: A prisoner has been released from prison
description: |
  This event is raised when a prisoner is released from prison, this includes temporary releases
  such as court appearances and transfers. We would recommend consumers to ensure their service is idempotent,
  there are scenarios where multiple events maybe raised for same release.
  <h4>Delayed events</h4>
  <div>
    The events <b>prison-offender-events.prisoner.received</b> and <b>prison-offender-events.prisoner.released</b> have a
  delay of 45 minutes built into them.
  This means the event is only generated 45 minutes after the prisoner is released (or received), rather than immediately.
  If they are then received (or released) back in again within that timeframe then the event will be suppressed.

  We have found that there are a number of reasons why a prisoner is released (or vica versa) and then shortly afterwards
  received, such as:
  <ol>
    <li>Release prior to a prisoner merge</li>
    <li>Where the prisoner never leaves reception</li>
    <li>Mistakes</li>
  </ol>
  We have found that these mistakes and alterations normally happen within the first 30 minutes, hence the 45 minute delay.

  So in the scenario:
  <ul>
    <li>User releases prisoner</li>
    <li>User receives same prisoner within 20 minutes</li>
  </ul>
  <ol>
    <li>No <b>prison-offender-events.prisoner.released</b> / <b>prison-offender-events.prisoner.received</b> events published</li>
    <li><b>prisoner-offender-search.prisoner.released</b> published immediately</li>
    <li><b>prisoner-offender-search.prisoner.received</b> published 20 minutes later (when they are received back into NOMIS)</li>
  </ol>

  Whereas in this scenario:
  <ul>
    <li>User releases prisoner</li>
    <li>User receives same prisoner 60 minutes later</li>
  </ul>
  <ol>
    <li><b>prisoner-offender-search.prisoner.released</b> published immediately</li>
    <li><b>prison-offender-events.prisoner.released</b> 45 minutes later</li>
    <li><b>prisoner-offender-search.prisoner.received</b> published 60 minutes later (when they are received back into NOMIS)</li>
    <li><b>prison-offender-events.prisoner.received</b> published 105 minutes later (when 45 minutes after they are received back into NOMIS)</li>
  </ol>

  If you have a service that just doesn't care that release events might be fired even when the prisoner
  does not physically leave the prison and your data will be restored back in the correct state after the receive event
  then you may as well listen on the search events, if on the other hand your service has side effects on a release
  (setting of fireworks, sending out emails, cancelling visits) you might want to consider listening on the more
  conservative <b>offender.events</b>.
contentType: application/json
payload:
  type: object
  required: [additionalInformation, description, eventType, occurredAt, personReference, publishedAt, version]
  properties:
    additionalInformation:
      type: object
      required: [currentLocation, currentPrisonStatus, details, nomisMovementReasonCode, nomsNumber, prisonId, reason]
      properties:
        currentLocation:
          type: string
          description: |
            enum  - indicates if prisoner is in or out of prison
            <ul>
              <li><b>IN_PRISON</b> prisoner in a prison</li>
              <li><b>OUTSIDE_PRISON</b> prisoner no longer in a prison</li>
              <li><b>BEING_TRANSFERRED</b> prisoner is being transferred</li>
            </ul>
          enum: [IN_PRISON, OUTSIDE_PRISON, BEING_TRANSFERRED]
          example: OUTSIDE_PRISON
        currentPrisonStatus:
          type: string
          description: |
            enum  - indicates if prisoner is still actively cared for by a prison, and alias for ACTIVE/INACTION
            <ul>
              <li><b>UNDER_PRISON_CARE</b> even if the prison is out of prison they are still attached to a prison and has not been discharged</li>
              <li><b>NOT_UNDER_PRISON_CARE</b> prisoner has been discharged from prison</li>
            </ul>
          enum: [UNDER_PRISON_CARE, NOT_UNDER_PRISON_CARE]
          example: NOT_UNDER_PRISON_CARE
        details:
          type: string
          description: Further human readable information about the reason. The contents is developer focused and not to be relied on.
          example: Movement reason code CR
        nomisMovementReasonCode:
          type: string
          description: |
            The reason code for the last movement. Since this is the literal NOMIS reference data that can change
            clients should be cautious of tightly integrating with this value. MOVE_RSN is the reference data domain in NOMIS
          example: CR
        nomsNumber:
          type: string
          description: Prison number of the prisoner
          pattern: '[A-Z][0-9]{4}[A-Z]{2}'
          example: A8513EA
        prisonId:
          type: string
          description: Three character Prison code
          pattern: '[A-Z]{3}'
          example: SWI
        reason:
          type: string
          description: |
            enum - reason for the release. Will be one of these values
            <ul>
              <li><b>TEMPORARY_ABSENCE_RELEASE</b> prisoner has been temporarily released and is expected to return</li>
              <li><b>RELEASED_TO_HOSPITAL</b> prisoner has been discharged in to the care of a hospital</li>
              <li><b>RELEASED</b> prisoner has been discharged, typically into the care of probation</li>
              <li><b>SENT_TO_COURT</b> prisoner has sent to court</li>
              <li><b>TRANSFERRED</b> prisoner is being transferred to another prison</li>
              <li><b>UNKNOWN</b> not sure why the prisoner has been released</li>
            </ul>
          enum: [TEMPORARY_ABSENCE_RELEASE, RELEASED_TO_HOSPITAL, RELEASED, SENT_TO_COURT, TRANSFERRED, UNKNOWN]
          example: RELEASED
    description:
      type: string
      const: A prisoner has been released from prison
    eventType:
      type: string
      const: prison-offender-events.prisoner.released
    occurredAt:
      type: string
      description: The date and time the event occurred
      format: date-time
      example: '2024-10-14T15:09:54+01:00'
    personReference:
      type: object
      required: [identifiers]
      properties:
        identifiers:
          type: array
          items:
            - type: object
              required: [type, value]
              properties:
                type:
                  type: string
                  const: NOMS
                value:
                  type: string
                  description: Prison number of the prisoner
                  pattern: '[A-Z][0-9]{4}[A-Z]{2}'
                  example: A8513EA
    publishedAt:
      type: string
      description: The date and time the event was published
      format: date-time
      example: '2024-10-14T15:10:54.742536797+01:00'
    version:
      type: integer
      description: Version of this event message. Currently 1
      example: 1
